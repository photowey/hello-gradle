buildscript {
    repositories {
        maven {
            name = 'local'
            url = "$rootDir/lib/release"
        }
    }
    dependencies {
        classpath "com.photowey:hello-plugin:1.0.0"
    }
}

plugins {
    // id 'java'
    id 'java-library'
}

apply from: 'version.gradle'
apply plugin: 'com.photowey.plugin.hello'
apply plugin: 'com.photowey.plugin.greeting'

// 自定义插件一
//class GreetingPlugin implements Plugin<Project> {
//    void apply(Project project) {
//        project.task('hello') {
//            doLast {
//                println 'Hello from the GreetingPlugin'
//            }
//        }
//    }
//}

//apply plugin: GreetingPlugin

//abstract class GreetingPluginExtension {
//    abstract Property<String> getMessage()
//
//    GreetingPluginExtension() {
//        message.convention('Hello from GreetingPlugin')
//    }
//}
//
//// 自定义插件二 - 抽象扩展
//class GreetingPlugin implements Plugin<Project> {
//    void apply(Project project) {
//        // Add the 'greeting' extension object
//        def extension = project.extensions.create('greeting', GreetingPluginExtension)
//        // Add a task that uses configuration from the extension object
//        project.task('hello') {
//            doLast {
//                println extension.message.get()
//            }
//        }
//    }
//}
//
//// Apply the plugin
//apply plugin: GreetingPlugin
//// Configure the extension
//greeting.message = 'Hi from Gradle'

interface GreetingPluginExtension {
    Property<String> getMessage()

    Property<String> getGreeter()
}

//// 自定义插件三 - 接口扩展
class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('greeting', GreetingPluginExtension)
        project.task('hello') {
            doLast {
                println "${extension.message.get()} from ${extension.greeter.get()}"
            }
        }
    }
}

apply plugin: GreetingPlugin

// Configure the extension using a DSL block
greeting {
    message = 'Hi'
    greeter = 'Gradle'
}

// ----------------------------------------------------------------

// sourceCompatibility = 11
// targetCompatibility(JavaVersion.VERSION_11)

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding("UTF-8")

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// javadoc.options.encoding = "UTF-8"
tasks.withType(Javadoc) {
    options.encoding("UTF-8")
}

// ----------------------------------------------------------------

java {
    // withJavadocJar()
    withSourcesJar()
}

// ----------------------------------------------------------------

task projectReport {
    doLast {
        println("Author: [${author}], JDK.version: [${configs.compileSdkVersion}], Spring.version: [${spring.version}]")
    }
}

// 创建任务方式一: project.task()
task helloTask {
    println("task.HelloTask")
    group("Hello")

    doFirst {
        println("HelloTask task.doFirst")
    }

    doLast {
        println("HelloTask task.doLast")
    }
}

helloTask.doFirst {
    println("HelloTask task.doFirst outer")
}

helloTask.doLast {
    print("HelloTask task.doLast outer")
}

def ctx = new HashMap<String, Closure>()
ctx.put("action", { println("in map.action") })

task(ctx, "helloMap") {
    println("task.HelloMap")
    group("Hello")

    doFirst {
        println("HelloMap task.doFirst")
    }

    doLast {
        println("HelloMap task.doLast")
    }
}

helloMap.doFirst {
    println("HelloMap task.doFirst outer")
}

helloMap.doLast {
    println("HelloMap task.doLast outer")
}

// 创建任务方式二: tasks.create()
tasks.create("helloCreate") {
    println("task.HelloCreate")
    group("Hello")

    doFirst {
        println("HelloCreate task.doFirst")
    }

    doLast {
        println("HelloCreate task.doLast")
    }
}

// 创建任务方式三: tasks.register()
// task 会被延迟创建
tasks.register("helloRegister") {
    println("task.HelloRegister")
    group("Hello")
}

tasks.create("helloList") {
    println("task.HelloList")
    group("Hello")

    // conf
    // type
    // override
    // action
    // description
    // group

    doFirst {
        println("HelloList task.doFirst")
    }

    doLast {
        println("HelloList task.doLast")
    }
}

// 依赖冲突
configurations.all() {
    Configuration configuration -> configuration.resolutionStrategy.failOnVersionConflict()
}